package algoritmoestruturadedados;


public class TadPilhaHenzo {

	int capacidade;
	int dados[];
	int n;
	int topo;

	public TadPilhaHenzo(int n) {

		topo = -1;
		capacidade = n;
		dados = new int[capacidade];

	}

	public boolean empilhar(int valor) {
		if(cheia()) { return false;}
		else {
		topo++;
		dados[topo]= valor;
		return true;
		}
//		if (cheia())
//			return false;
//		topo++;
//		dados[topo] = valor;
//		return true;
	}

//	public boolean desempilhar() {
//		return (topo == -1);
//	}

	public boolean cheia() {

		if (topo == capacidade - 1)
			;
		return false;
	}

	public boolean vazio() {
		return (topo == -1);
	}

	public int desempilha() {
		// ----------------------------------------------------------------
		int retorno = -1;

		if (!this.vazio()) {
			retorno = dados[this.topo];
			this.topo--;
		}
		return retorno;
	}

	public void imprime() {

		int i;
		for (i = 0; i <= topo; i++)
			System.out.println("Elemento [" + i + "]=" + this.dados[i]);
	}

	public int topper() {
		return topo;
	}

	public static void main(String args[]) {
		 // a. Criação de pilhas
        TadPilhaHenzo pilha1 = new TadPilhaHenzo (10);
        TadPilhaHenzo pilha2 = new TadPilhaHenzo (10);
        
     // b. Empilhar os 10 primeiros números ímpares na pilha1 (Lucas)

       int impar = 1;
       for(int i = 0; i < 20; i++){
           pilha1.empilha(impar);
           impar += 2; // ou impar=impar+2;
       }

       // versão com while (Gustavo)
       // int valor = 1;
       // while (!pilha1.cheia()){
       //         pilha1.empilha(valor);
       //         valor = valor + 2;
       //  }

     while (!pilha2.cheia()) {
  	   
  	   pilha2.empilha( pilha1.desempilha());
     }

     // c. Imprimir os elementos da pilha1
        pilha1.imprime();
        pilha2.imprime();

  } //main    
} //class
	

//		// a. CriaÃ§Ã£o de pilhas
//		TadPilhaHenzo p1 = new TadPilhaHenzo(10);
//		TadPilhaHenzo p2 = new TadPilhaHenzo(10);
//		for (int j = 0; j < 21; j++) {
//			if (j % 2 != 0)
//				p1.empilhar(j);
//		}
//
//		
//		for (int j = 0; j < 21; j++) {
//			if (j % 2 != 0)
//				p2.empilhar(p1.desempilha());
//		}
//		p2.imprime();
//
//	}
//
//}